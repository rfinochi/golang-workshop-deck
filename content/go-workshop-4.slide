Go Workshop - Dia 4
https://golang-workshop.io
Tags: golang

Rodolfo Finochietti
[[https://rodolfofinochietti.me]]
@rodolfof

* Programando una App Web - HTTP Router

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/20-web-ui][Ejercicio 20]]

* Gin Web Framework

.image ./resources/images/gin-logo.jpg 250 _

"[[https://gin-gonic.com/][Gin]] is a high-performance micro-framework that delivers a very minimalistic framework that carries with it only the most essential features, libraries, and functionalities needed to build web applications and microservices."

* Gin Web Framework - Caracteristicas

- Speed
- Crash-Free
- Routing
- JSON Validation
- Error Management
- Built-In Rendering

* Gin Web Framework

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/21-gin][Ejercicio 21]]

	$ go get -u github.com/gin-gonic/gin
	$ go get -u github.com/gin-gonic/contrib/static

* HTTP Client

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/22-http-client][Ejercicio 22]]

El paquete [[http][https://golang.org/pkg/net/http/]] contiene una implementacion de un cliente http que permite emular las acciones que realiza un web browser.

* HTTP Client - GET

	resp, _ := http.Get("https://httpbin.org/get")
	defer resp.Body.Close()

	data, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(data))

* HTTP Client - POST

	payload := "Hello world!"
	resp, _ := http.Post("https://httpbin.org/post", "text/plain", strings.NewReader(payload))
	defer resp.Body.Close()

	data, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(data))

* Programacion funcional

Functional Programming by Wikipedia:

	Functional programming is a programming paradigm that treats computation 
	as the evaluation of mathematical functions and avoids state and mutable data
	
En otras palabras la programacion funcional promueve codigo sin cambios en los valores de las variables para evitar efectos no esperados.

Es lo opuesto de la programacion imperativa, que enfatiza los cambios de estado.

: https://medium.com/@geisonfgfg/functional-go-bc116f4c96a4

* Programacion funcional

Esto quiere decir que:

- La informacion no cambia (no mutable data).
- No hay estado.
- Una vez asignado un valor a una variable (value binding), la variable (symbol) no puede cambiar su valor.
- La salida (output) de una funcion solo depende de los valores de entrada (input).

* Programacion funcional - Ventajas

- *Codigo* *mas* *limpio*: las _variables_ no se modifican una vez que se define, por lo tanto no tenemos que seguir los cambios de estado por todo el codigo para comprender como funciona el codigo de un programa.
- *Referential* *transparency*: Las expresiones pueden ser reemplazadas por sus valores. Si llamamos a una funcion con los mismo valores, estamos seguros que el resultado es el mismo (no hay estado en ningun otro codigo del programa que pueda cambiar el resultado).

	No hay razon para lo que Einstein definio como locura:
	"hacer la misma cosa una y otra vez esperando diferentes resultados"

* Programacion funcional en Golang

Golang es un lenguaje de programacion multi-lenguaje, no es un lenguaje funcional, pero tiene caracteristicas que nos permiten desarrollar codigo que aplique los principios de la programacion funcional.

* Programacion funcional en Golang - Nunca actualizar, siempre crear

*Strings*

Mal

	name := "Juan"
	name := name + " Carlos"

Bien

	const firstname = "Juan Carlos"
	const lasname = "Batman"
	const name = firstname + " " + lastname

* Programacion funcional en Golang - Nunca actualizar, siempre crear

*Arrays*

Mal

	years := [4]int{2001, 2002}
	years[2] = 2003
	years[3] = 2004
	years // [2001, 2002, 2003, 2004]

Bien

	years := [2]int{2001, 2001}
	allYears := append(years, 2003, [2]int{2004, 2005}

* Programacion funcional en Golang - Nunca actualizar, siempre crear

*Maps*

Mal

	ages := map[string]int{"John": 30}
	ages["Mary"] = 28
	ages // {"John": 30, "Mary": 28}

Bien

	ages1 := map[string]int{"John": 30}
	ages2 := map[string]int{"Mary": 28}
	func mergeMaps(mapA, mapB map[string]int) map[string]int {
		allAges := make(map[K]V, len(ages1) + len(ages2))
		for k, v := range mapA {
			allAges[k] = v
		}
		for k, v := range mapB {
			allAges[k] = v
		}
		return allAges
	}
	allAges := mergeMaps(ages1, ages2)

* Programacion funcional en Golang - Higher Order Functions

Las funciones son _first-class_ _objects_ en Golang, si se quiere pasar una funcion a otra funcion, se debe tratar como cualquier otro objeto.

	func caller(f func(string) string) {
		result := f("Juan")
		fmt.Println(result)
	}
	
	f := func(s name) string {
		return "Hola " + name
	}
	
	caller(f)

* Programacion funcional en Golang - Currying

Tener *higher* *order* *functions* habilita el *currying*, que es la posibilidad de tomar una funcion que recibe n parametros y convertirla en la composicion de n funciones que reciben 1 parametro:

	func plus(x, y int) int {
		return x + y
	}

	func partialPlus(x int) func(int) int {
		return func(y int) int {
			return plus(x, y)
		}
	}

	func main()
	{
		plus_one := partialPlus(1)
		fmt.Println(plus_one(5)) //prints 6
	}

* Google App Engine Deploy 

Crear un proyecto

	$ gcloud projects create PROJECT_ID

Configurar el proyecto por defecto en nuestro entorno

	$ gcloud config set project PROJECT_ID

Crear una nueva aplicacion en [[https://cloud.google.com/appengine][GAE]]

	$ gcloud app create

* Google App Engine Deploy - Service Configuration File

Agregar un archivo [[https://cloud.google.com/appengine/docs/flexible/go/configuring-your-app-with-app-yaml][app.yaml]]

	runtime: go115

	env_variables:
	  GOLANGORG_CHECK_COUNTRY: true

	nobuild_files: views/

* Google App Engine Deploy 

Subir la aplicacion a [[https://cloud.google.com/appengine][GAE]]

	$ gcloud app deploy

Abrir la aplicacion

	$ gcloud app browse

[[https://cloud.google.com/appengine/docs/standard/go112/building-app][* Building a Go App on App Engine]]

* Azure Deploy

- Crear un nuevo Web Site en el portal de Azure
- Instalar Go via la consola

    $ curl -O https://storage.googleapis.com/golang/go1.16.windows-386.zip
    $ unzip go1.16.windows-386.zip

    Comprobar la ultima version en https://golang.org/dl
    No preocuparse si aparece el error Bad Request

- Copiar nuestro codigo en el Web Site
- La variable de entorno que especifica el port es:
	http.ListenAndServe(":"+os.Getenv("HTTP_PLATFORM_PORT"), nil)
- Crear un Web.config con la siguiente configuracion (next slide)

: http://www.wadewegner.com/2014/12/4-simple-steps-to-run-go-language-in-azure-websites/

* Azure Deploy

	<?xml version="1.0" encoding="UTF-8"?>
	<configuration>
	    <system.webServer>
	<handlers>
	    <add name="httpplatformhandler" path="*" verb="*" 
		modules="httpPlatformHandler" 
		resourceType="Unspecified" />
	</handlers>
	<httpPlatform processPath="d:\home\site\wwwroot\go\bin\go.exe" 
	      arguments="run d:\home\site\wwwroot\server.go" 
	      startupTimeLimit="60">
	    <environmentVariables>
	      <environmentVariable name="GOROOT" value="d:\home\site\wwwroot\go" />
	    </environmentVariables>
	</httpPlatform>
	    </system.webServer>
	</configuration>
	
* Review time

.image ./resources/images/review-time.png 500 _

* Challenge 4

.image ./resources/images/chalenge-accepted.jpg 150 _

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/challenge4][Instrucciones del challenge 4]]

Modificar la API Rest del challenge 3.3 para usar Gin.