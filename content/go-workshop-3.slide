Go Workshop - Dia 3
https://golang-workshop.io
Tags: golang

Rodolfo Finochietti
[[https://rodolfofinochietti.me]]
@rodolfof

Mariano Sánchez
@marianosz

* Error Handling

El manejo de excepciones es una de las caracteristicas mas controversiales en Golang.

.image ./resources/images/error-handling.jpg 450 _

* Error Handling

- Los errores en Golang *no* *son* excepciones.
- Por convencion, si una funcion puede fallar deber retornar un tipo _error_.
- El tipo _error_ contiene la infomacion del problema.
- Si es _nil_ quiere decir que no hubo errores

	func calculate(a, b int) (int, error) { }

	result, err := caculate(a, b)
	if err != nil {
		// handle the error
	}
	// continue

: https://medium.com/gett-engineering/error-handling-in-go-53b8a7112d04

* Defer

- Una declaracion _defer_ guarda la llamada a la funcion en una lista.
- La lista de llamadas guardadas se ejecuta despues de que la funcion circundante termina.
- _defer_ se usa comunmente para simplificar acciones de limpieza.

	func CopyFile(dstName, srcName string) (written int64, err error) {
		src, err := os.Open(srcName)
		if err != nil {
			return
		}
		defer src.Close()

		dst, err := os.Create(dstName)
		if err != nil {
			return
		}
		defer dst.Close()

		return io.Copy(dst, src)
	}

: https://blog.golang.org/defer-panic-and-recover

* Panic y Recover

- *panic* detiene el flujo de control ordinario y comienza un proceso de panico (_panicking_).
- Cuando la funcion F llama a _panic_, la ejecucion de F se detiene, las funciones diferidas en F se ejecutan normalmente y luego F vuelve a su llamador. 
- Para el llamador, F se comporta como una llamada al panico, y vuelve a su llamador
- El proceso continua hasta que todas las funciones retornan, momento en el cual el programa falla.
- *recover* recupera el control de una funcion en panico. 
- La recuperacion solo es util dentro de las funciones diferidas.
- Durante la ejecucion normal, una llamada a recuperar devolvera nulo y no tendra otro efecto. 
- Si la funcion actual esta en panico, una llamada a recuperar capturara el valor que se especifico al crear el panico y reanudara la ejecucion normal.

* Panic y Recover

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/16-defer-panic-recover/main.go][Ejemplo]]

- "Errors are values."
- "Don't just check errors, handle them gracefully."
- "Don't panic."

All of Rob Pike's [[https://go-proverbs.github.io/][Go Proverbs]]

* Concurrencia - Go-Routines

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/17-concurrency][Ejercicio 17]]

- Golang provee un mecanismo sencillo para crear un nuevo _"thread"_ [[https://medium.com/rungo/achieving-concurrency-in-go-3f84cbf870ca][*]].
- Se usa el keyword *go* antes de una llamada a una funcion (Go-Routines).

.image ./resources/images/concurrency.png 300 _

* Concurrencia - Channels

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/17-concurrency][Ejercicio 17]]

- Los Channels son _pipes_ para conectar _goroutines_ concurrentes.
- Sirven para enviar y recibir valores entre dos _goroutines_.

.image ./resources/images/channels.jpg 100 _

.image ./resources/images/concurrency-channels.png 300 _

* Acceso a Datos

Official MongoDB Go driver
	
	$ go get -u go.mongodb.org/mongo-driver/mongo

Official mysql Go driver
	
	$ go get github.com/go-sql-driver/mysql

* Acceso a Datos

Trabajando con MongoDB

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/19-dbaccess/mongo][Ejercicio 18 - Mongo]]

Trabajando con mysql

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/19-dbaccess/mysql][Ejercicio 18 - mysql]]

* Programando una API REST - HTTP Router

- Para crear una API REST vamos a usar el paquete [[http://www.gorillatoolkit.org/pkg/mux][gorilla/mux]].
- _gorilla/mux_ implementa un router para asociar _requests_ con _handlers_ (funciones Golang).

Se instala con:

	$ go get -u github.com/gorilla/mux

* Programando una API REST - HTTP Router

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/18-rest-api][Ejercicio 19]]

.code ./resources/src/rest-api.go

* Programando una API REST - JSON Encoding

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/18-rest-api][Ejercicio 19]]

- Para trabajar JSON vamos a usar el paquete [[https://golang.org/pkg/encoding/json/][encoding/json]].
- Se utilizan las funciones *Marshal* y *Encode*.

* Programando una API REST - JSON Encoding

.play -edit -numbers ./resources/src/rest-api-json.go

## Middlewares

- Cualquier funcionalidad compartida que se desee reutilizar para distintas *requests HTTP* se puede desarrollar como un *middleware*. 
- Por ejemplo, es posible que se desee registrar cada request, comprimir cada respuesta o verificar un caché.
- Un *middleware* se trata de código autónomo que actúa de forma independiente sobre un *request* antes o después de los *handlers* de la app. 

El patrón estándar para crear un *middleware* custom es el siguiente:

.code ./resources/src/rest-api-middleware.go

* Review time

.image ./resources/images/review-time.png 500 _

* Challenge 3.1

.image ./resources/images/chalenge-accepted.jpg 150 _

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/challenge3/3.1][Instrucciones del challenge 3.1]]

* Challenge 3.2

.image ./resources/images/chalenge-accepted.jpg 150 _

Crear una API REST para una aplicacion de recordatorios (To-Do) que contenga todas las funciones [[https://en.wikipedia.org/wiki/Create,_read,_update_and_delete][CRUD]] para la siguiente entidad:

	ID     int
	Title  string
	IsDone bool

Hints:

- Los datos se pueden almacenar en un arreglo.
- La funcion *strconv.Atoi* del paquete *[[https://golang.org/pkg/strconv/][strconv]]* permite convertir un string a un integer.

* Challenge 3.3

.image ./resources/images/chalenge-accepted.jpg 150 _

Modificar la API Rest del challenge 4.1 para que pueda acceder a diferentes fuentes de datos (en memoria y (MongoDB / mysql)) usando el patron [[https://medium.com/@pererikbergman/repository-design-pattern-e28c0f3e4a30][Repository]].

Hints:

- Se pueden copiar las funciones necesarias para operar con MongoDB / mySql desde el [[https://github.com/rfinochi/golang-workshop-src/tree/master/19-dbaccess][Ejercicio 19]].